{"version":3,"sources":["components/MoreInfo/MoreInfo.module.css","pages/MoreInfoPage/MoreInfoPage.module.css","components/Forecast/Forecast.module.css","components/MoreInfo/MoreInfo.jsx","components/Forecast/Forecast.jsx","components/Forecast/ForecastContainer.js","pages/MoreInfoPage/MoreInfoPage.jsx","pages/MoreInfoPage/MoreInfoPageContainer.js","redux/operations.js"],"names":["module","exports","MoreInfo","onGoBack","push","props","history","this","data","name","sys","main","clouds","coord","weather","className","card","returnButton","onClick","title","country","contentWrapper","dataWrapper","bold","Math","round","temp","feels_like","temp_max","temp_min","all","lon","lat","imageWrapper","weatherIcon","src","icon","alt","Component","withRouter","Forecast","id","onLoad","getRequestById","then","res","width","height","mappedArray","margin","top","right","left","bottom","wrapper","strokeDasharray","dataKey","type","stroke","activeDot","r","PureComponent","mapDispatchToProps","actions","connect","state","moreInfoData","MoreInfoPage","fetchWeather","match","params","fetchWeatherById","BASE_URL","API_KEY","fetchWeatherByName","query","dispatch","axios","get","getRequest","cityName"],"mappings":"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","file":"static/js/6.2eb231fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"MoreInfo_card__3DIuX\",\"title\":\"MoreInfo_title__2NtTD\",\"contentWrapper\":\"MoreInfo_contentWrapper__2QXe_\",\"dataWrapper\":\"MoreInfo_dataWrapper__1B7Qq\",\"imageWrapper\":\"MoreInfo_imageWrapper__GBp0D\",\"weatherIcon\":\"MoreInfo_weatherIcon__faUWc\",\"returnButton\":\"MoreInfo_returnButton__171Cy\",\"bold\":\"MoreInfo_bold__vQ7PD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MoreInfoPage_wrapper__2vJT0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Forecast_wrapper__kSuaB\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n// Styles\nimport {\n  card,\n  title,\n  contentWrapper,\n  dataWrapper,\n  imageWrapper,\n  weatherIcon,\n  returnButton,\n  bold,\n} from './MoreInfo.module.css';\n\nclass MoreInfo extends Component {\n  static propTypes = {\n    data: PropTypes.object.isRequired,\n  };\n  onGoBack = () => {\n    const { push } = this.props.history;\n    push('/');\n  };\n  render() {\n    const { name, sys, main, clouds, coord, weather } = this.props.data;\n    return (\n      <>\n        {!!this.props.data && (\n          <div className={card}>\n            <button className={returnButton} onClick={this.onGoBack}>\n              &#8592;\n            </button>\n            <h2 className={title}>\n              {name},{sys.country}\n            </h2>\n            <div className={contentWrapper}>\n              <div className={dataWrapper}>\n                <p>\n                  Temperature:\n                  <span className={bold}> {Math.round(main.temp)}°C</span>\n                </p>\n                <p>\n                  Feels like:{' '}\n                  <span className={bold}>{Math.round(main.feels_like)}°C</span>\n                </p>\n                <p>\n                  <span>\n                    t.max:\n                    <span className={bold}> {Math.round(main.temp_max)}°C</span>\n                  </span>\n                  <span>\n                    t.min:\n                    <span className={bold}> {Math.round(main.temp_min)}°C</span>\n                  </span>\n                </p>\n                <p>Сloudiness: {clouds.all} %</p>\n                <p>Longitude: {coord.lon}°</p>\n                <p>Latitude: {coord.lat}°</p>\n              </div>\n\n              <div className={imageWrapper}>\n                <img\n                  className={weatherIcon}\n                  src={`http://openweathermap.org/img/wn/${weather[0].icon}@4x.png`}\n                  alt=\"weather\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default withRouter(MoreInfo);\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { wrapper } from './Forecast.module.css';\nimport { getRequestById } from '../../redux/operations';\n\nexport default class Forecast extends PureComponent {\n  static propTypes = {\n    data: PropTypes.object,\n    onLoad: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n  };\n  componentDidMount() {\n    const { id, onLoad } = this.props;\n    getRequestById(id).then(res => onLoad(res));\n  }\n\n  render() {\n    const { data } = this.props;\n    return (\n      <>\n        {data && (\n          <LineChart\n            width={600}\n            height={300}\n            data={data.mappedArray}\n            margin={{\n              top: 20,\n              right: 30,\n              left: 5,\n              bottom: 5,\n            }}\n            className={wrapper}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line\n              type=\"monotone\"\n              dataKey=\"temperature\"\n              stroke=\"#8884d8\"\n              activeDot={{ r: 8 }}\n            />\n          </LineChart>\n        )}\n      </>\n    );\n  }\n}\n","import * as actions from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport Forecast from './Forecast'\n\n\nconst mapStateToProps = state => ({\n  data: state.moreInfoData,\n});\n\nconst mapDispatchToProps = {\n  onLoad: data => actions.showDiagram(data),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Forecast);\n","import React, { Component } from 'react';\n// Components\nimport MoreInfo from '../../components/MoreInfo/MoreInfo';\n// Styles\nimport { wrapper } from './MoreInfoPage.module.css';\nimport Forecast from '../../components/Forecast/ForecastContainer';\n\nexport default class MoreInfoPage extends Component {\n  componentDidMount() {\n    const { fetchWeather, match } = this.props;\n    fetchWeather(match.params.id);\n  }\n\n  render() {\n    const { moreInfoData, match } = this.props;\n    return (\n      <div className={wrapper}>\n        {moreInfoData.sys && <MoreInfo data={moreInfoData} />}\n        <Forecast id={match.params.id} />\n      </div>\n    );\n  }\n}\n","import { fetchWeatherById } from '../../redux/operations';\nimport { connect } from 'react-redux';\nimport MoreInfoPage from './MoreInfoPage';\n\nconst mapStateToProps = state => ({\n  moreInfoData: state.moreInfoData,\n});\n\nconst mapDispatchToProps = {\n  fetchWeather: fetchWeatherById,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MoreInfoPage);\n","import axios from 'axios';\nimport * as actions from './actions';\n\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = 'fdae17d5d23163c6e5a9954e6bc4bc4b';\n\nexport const fetchWeatherByName = query => dispatch => {\n  return axios\n    .get(`${BASE_URL}?q=${query}&appid=${API_KEY}&units=metric`)\n    .then(res => {\n      dispatch(actions.fetchSuccess(res.data));\n    });\n};\n\nexport const getRequest = cityName => {\n  return axios.get(`${BASE_URL}?q=${cityName}&appid=${API_KEY}&units=metric`);\n};\nexport const getRequestById = id => {\n  return axios.get(\n    `https://api.openweathermap.org/data/2.5/forecast?id=${id}&appid=${API_KEY}&units=metric`,\n  );\n};\n\nexport const fetchWeatherById = id => dispatch => {\n  return axios\n    .get(`${BASE_URL}?id=${id}&appid=${API_KEY}&units=metric`)\n    .then(res => {\n      dispatch(actions.moreInfo(res.data));\n    });\n};\n"],"sourceRoot":""}